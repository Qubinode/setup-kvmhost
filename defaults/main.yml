---
#######################
# Configurable Variables
###

# Set to true when host is virtual or running in a container
cicd_test: false  

# Libvirt network and storage
# ---------------------------
kvm_host_libvirt_dir: /var/lib/libvirt/images
kvmhost_bridge_device: vmbr0
kvm_host_domain: example.com

libvirt_networks:
  - name: "vmnetbr0"
    create: true
    mode: bridge
    bridge_name: "{{ kvmhost_bridge_device }}"

libvirt_host_storage_pools:
  - name: default
    state: active
    autostart: yes
    path: "{{ kvm_host_libvirt_dir }}"

# Set to yes to add the admin_user to the libvirt group
# and change libvirt to be accessible user 
enable_libvirt_admin_user: no

# The actual libvirt group, users added to this group will have admin access to KVM
# when enable_libvirt_admin_user is set
kvm_host_group: libvirt

# User to get regular access to libvirt
admin_user: ""

# Configure the user bash shell login prompt
# This will overwrite your existing .bashrc, .vimrc and other terminal configuration files
configure_shell: no

# users whose shell will be configured
shell_users:
  - "{{ admin_user }}"


#############################
# None configurable variables
###
libvirt_services:
  - libvirtd
  - tuned

# synth shell global directory
synth_shell_dir: /etc

# Required RPM packages
# ---------------------
required_rpm_pakcages:
   - virt-install
   - libvirt-daemon-config-network
   - libvirt-daemon-kvm
   - libguestfs-tools
   - libvirt-client
   - qemu-kvm
   - nfs-utils
   - libvirt-daemon
   - libvirt-client
   - virt-top
   - tuned
   - openssh-server
   - wget
   - bc
   - git
   - net-tools
   - bind-utils
   - yum-utils
   - iptables-services
   - bash-completion
   - kexec-tools
   - sos
   - psacct
   - vim
   - device-mapper-event-libs
   - device-mapper-libs
   - httpd-tools
   - java-1.8.0-openjdk-devel.x86_64
   - tmux
   - python3-dns
   - python3-pip
   - python3-lxml
   - cargo
   - lm_sensors
   - python3-netaddr



#kvm_host_bootproto: 'dhcp'
#kvm_bridge_type: 'Bridge'

#kvm_host_domain: "lab.example"
#kvm_host_dns_servers: 
#  - "{{ primary_dns_server | default('1.1.1.1') }}"
#  - "{{ secondary_dns_server | default('8.8.8.8') }}"
#kvm_host_search_domains:
#  - "{{ kvm_host_domain }}"
#
#
#
### name for libvirt bridge network
#libvirt_bridge_name: qubinet
#
### name for the system bridge ethernet interface
#kvmhost_bridge_device: vmbr0
#
#
### Additional interface settings
#ignore_auto_routes: no
#ignore_auto_dns: no
#ipv6_method: ignore
#
#######################
### Libvirt Storage
###
### Set to no if you don't want to configure libvirt storage
#create_libvirt_storage: yes
### Where to store libvirt VMs disk images
#libvirt_images_dir: /var/lib/libvirt/images
### Libvirt pool name
#
################################
### No need to modify these vars
###
### Setup host networking vars
#discovered_ip: "{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}"
#kvm_host_gw: "{{ gateway_ip|default(ansible_default_ipv4.gateway) }}"
#kvm_host_interface: "{{ bridge_interface|default(ansible_default_ipv4.interface) }}"
#kvm_host_ip: "{{ ip_address|default(discovered_ip) }}"
#kvm_host_netmask: "{{ host_netmask|default(ansible_default_ipv4.netmask) }}"
#kvm_host_macaddr: "{{ mac_address|default(ansible_facts[kvm_host_interface]['macaddress']) }}"
#kvm_host_ip_mask: "{{ kvm_host_ip }}/{{ kvm_host_netmask }}"
#kvm_host_mask_prefix: "{{ netmask_prefix|default(kvm_host_ip_mask | ipaddr('prefix')) }}"
#kvm_host_mtu: "{{ mtu }}"
#kvm_host_auto_routes: "{{ ignore_auto_routes }}"
#kvm_host_auto_dns: "{{ ignore_auto_dns }}"
#kvm_host_ipv6_method: "{{ ipv6_method }}"
#
####################
## Bridge networking
#network_connections:
#  # Define the bridge interface
#  - name: "{{ kvmhost_bridge_device }}"
#    state: up
#    type: bridge
#    interface_name: "{{ kvmhost_bridge_device }}"
#    ip:
#      dhcp4: false
#      auto6: false
#      address:
#        - "{{ kvm_host_ip }}/{{ kvm_host_mask_prefix }}"
#      gateway4: "{{ kvm_host_gw }}"
#      dns: "{{ kvm_host_dns_servers }}"
#      dns_search: "{{ kvm_host_search_domains }}"
#  # set an ethernet port to the bridge
#  - name: "{{ kvm_host_interface }}"
#    state: up
#    type: ethernet
#    interface_name: "{{ kvm_host_interface }}"
#    controller: "{{ kvmhost_bridge_device }}"
#    port_type: bridge
#
#
## KVM host packages
#libvirt_pkgs:
#  - bash-completion
#  - bind-utils
#  - cockpit
#  - cockpit-dashboard
#  - cockpit-machines
#  - firewalld
#  - git
#  - ipcalc
#  - kexec-tools
#  - libguestfs-tools
#  - libguestfs-tools-c
#  - libvirt-client
#  - libvirt-daemon
#  - libvirt-daemon-config-network
#  - libvirt-daemon-kvm
#  - net-tools
#  - nfs-utils
#  - NetworkManager-libnm
#  - nm-connection-editor 
#  - nmap
#  - openssh-server
#  - podman
#  - psacct
#  - python3-dns
#  - python3-libvirt
#  - python3-lxml
#  - python3-libsemanage
#  - python3-policycoreutils
#  - python3-netaddr
#  - python3-pip
#  - python3-pyyaml
#  - python-podman-api
#  - qemu-kvm
#  - sos
#  - tmux
#  - toolbox
#  - python3-netaddr
#  - traceroute
#  - tree
#  - tuned
#  - vim
#  - virt-install
#  - virt-top
#  - wget
#  - yum-utils
#  - unzip
#
### Services to enable
#qubinode_services:
#  - libvirtd
#  - tuned
#  - cockpit
#  - cockpit.socket
#
###*****************************
## This will be phased out now that the rhel system roles 
## Setups up networking

#
## Dictionary of libvirt storage pools to create

#
## Enable cockpit service
#enable_cockpit: no
#

#


#
## The primary configuration directory
#project_dir: /home/admin/project
#
###***********************
### Non user configuration
#
## KVM host RHEL 8 packages

#

#
## packages for cockpit
#cockpit_packages:
#  - cockpit
#  - cockpit-dashboard
#  - cockpit-storaged
#  - cockpit-packagekit
#  - cockpit-machines
#  - cockpit-bridge
#  - subscription-manager-cockpit
#  - cockpit-ws
#

#
###***********************
### Deprecated vars
#qcow_rhel_name: rhel-8.2-x86_64-kvm.qcow2
#